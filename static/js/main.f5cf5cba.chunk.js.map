{"version":3,"sources":["types/FilterStatusValues.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["FilterStatusValues","actions","todo","type","payload","currentTodoReducer","state","action","initialParams","query","status","filterReducer","params","All","Active","Completed","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","filterdTodos","useMemo","preparedQuery","trim","toLowerCase","title","includes","completed","isNoMatchingTodos","length","className","map","classNames","id","onClick","setCurrentTodo","TodoFilter","onChange","e","target","value","filterActions","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","selectedUser","setSelectedUser","useEffect","userId","href","email","name","App","todosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f5cf5cba.chunk.js","sourcesContent":["export enum FilterStatusValues {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { FilterParams } from '../types/FilterParams';\nimport { FilterStatusValues } from '../types/FilterStatusValues';\n\ntype FilterAllAction = { type: 'filter/ALL' };\ntype FilterActiveAction = { type: 'filter/ACTIVE' };\ntype FilterCompletedAction = { type: 'filter/COMPLETED' };\ntype FilterSetQueryAction = { type: 'filter/SETQUERY', payload: string };\ntype Action = FilterAllAction\n| FilterActiveAction\n| FilterCompletedAction\n| FilterSetQueryAction;\n\nconst initialParams: FilterParams = {\n  query: '',\n  status: 'all',\n};\n\nconst setFilterAll = (): FilterAllAction => {\n  return { type: 'filter/ALL' };\n};\n\nconst setFilterActive = (): FilterActiveAction => {\n  return { type: 'filter/ACTIVE' };\n};\n\nconst setFilterCompleted = (): FilterCompletedAction => {\n  return { type: 'filter/COMPLETED' };\n};\n\nconst setFilterQuery = (query: string):FilterSetQueryAction => {\n  return { type: 'filter/SETQUERY', payload: query };\n};\n\nexport const actions = {\n  setFilterAll,\n  setFilterActive,\n  setFilterCompleted,\n  setFilterQuery,\n};\n\nconst filterReducer = (\n  params: FilterParams = initialParams,\n  action: Action,\n): FilterParams => {\n  switch (action.type) {\n    case 'filter/ALL':\n      return { ...params, status: FilterStatusValues.All };\n\n    case 'filter/ACTIVE':\n      return { ...params, status: FilterStatusValues.Active };\n\n    case 'filter/COMPLETED':\n      return { ...params, status: FilterStatusValues.Completed };\n\n    case 'filter/SETQUERY':\n      return { ...params, query: action.payload };\n\n    default:\n      return params;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype InitTodosAction = { type: 'todos/INIT', payload: Todo[] };\n\nconst initTodosAction = (todos: Todo[]): InitTodosAction => ({\n  type: 'todos/INIT',\n  payload: todos,\n});\n\nexport const actions = { initTodosAction };\n\nconst todosReducer = (todos: Todo[] = [], action: InitTodosAction): Todo[] => {\n  switch (action.type) {\n    case 'todos/INIT':\n      return action.payload;\n\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport classNames from 'classnames';\nimport React, { useMemo } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\nimport { FilterStatusValues } from '../../types/FilterStatusValues';\n\nexport const TodoList: React.FC = () => {\n  const todos = useAppSelector(state => state.todos);\n  const { query, status } = useAppSelector(state => state.filter);\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const setCurrentTodo = (todo: Todo) => dispatch(actions.setTodo(todo));\n\n  const filterdTodos = useMemo(() => {\n    const preparedQuery = query.trim().toLowerCase();\n\n    return todos.filter(todo => {\n      if (!todo.title.trim().toLowerCase().includes(preparedQuery)) {\n        return false;\n      }\n\n      switch (status) {\n        case FilterStatusValues.All:\n        default:\n          return true;\n\n        case FilterStatusValues.Active:\n          return !todo.completed;\n\n        case FilterStatusValues.Completed:\n          return !!todo.completed;\n      }\n    });\n  }, [todos, query, status]);\n\n  const isNoMatchingTodos = !!todos.length && !filterdTodos.length;\n\n  return (\n    <>\n      {isNoMatchingTodos && (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n\n      {!!filterdTodos.length && (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {filterdTodos.map(todo => (\n              <tr\n                data-cy=\"todo\"\n                className={classNames({\n                  'has-background-info-light': todo === currentTodo,\n                })}\n                key={todo.id}\n              >\n                <td className=\"is-vcentered\">{todo.id}</td>\n                <td className=\"is-vcentered\">\n                  {todo.completed && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n                </td>\n                <td className=\"is-vcentered is-expanded\">\n                  <p className={\n                    todo.completed\n                      ? 'has-text-success'\n                      : 'has-text-danger'\n                  }\n                  >\n                    {todo.title}\n                  </p>\n                </td>\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => setCurrentTodo(todo)}\n                  >\n                    <span className=\"icon\">\n                      <i className={classNames('far',\n                        {\n                          'fa-eye': currentTodo !== todo,\n                        },\n                        {\n                          'fa-eye-slash': currentTodo\n                            && todo.id === currentTodo.id,\n                        })}\n                      />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { FilterStatusValues } from '../../types/FilterStatusValues';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { query, status } = useAppSelector(state => state.filter);\n\n  const setStatusActive = () => dispatch(filterActions.setFilterActive());\n  const setStatusCompleted = () => dispatch(filterActions.setFilterCompleted());\n  const setStatusALL = () => dispatch(filterActions.setFilterAll());\n\n  const handleSelect = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    switch (e.target.value) {\n      case FilterStatusValues.Active:\n        setStatusActive();\n        break;\n\n      case FilterStatusValues.Completed:\n        setStatusCompleted();\n        break;\n\n      case FilterStatusValues.All:\n      default:\n        setStatusALL();\n    }\n  };\n\n  const handleQueryChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(filterActions.setFilterQuery(e.target.value));\n  };\n\n  const handleQueryClear = () => {\n    dispatch(filterActions.setFilterQuery(''));\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={handleSelect}\n            value={status}\n          >\n            <option value={FilterStatusValues.All}>All</option>\n            <option value={FilterStatusValues.Active}>Active</option>\n            <option value={FilterStatusValues.Completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          onChange={handleQueryChange}\n          value={query}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query && (\n            <button\n              aria-label=\"close btn\"\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleQueryClear}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { actions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const closeModal = () => dispatch(actions.removeTodo());\n\n  useEffect(() => {\n    if (currentTodo) {\n      getUser(currentTodo.userId).then(setSelectedUser);\n    }\n  }, []);\n\n  if (!currentTodo) {\n    return null;\n  }\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!selectedUser ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {currentTodo.id}\n            </div>\n\n            <button\n              aria-label=\"close\"\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={closeModal}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {currentTodo.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto: ${selectedUser.email}`}>\n                {selectedUser.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as todosActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const todos = useAppSelector(state => state.todos);\n\n  useEffect(() => {\n    getTodos()\n      .then(res => {\n        dispatch(todosActions.initTodosAction(res));\n      });\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {!todos.length && <Loader />}\n\n              <TodoList />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}